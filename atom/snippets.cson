# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.php':
  'error.log':
    'prefix': 'dbg'
    'body': """foreach (\$${1:arr} as \$${2:key} => \$${3:val}) {
				error_log(\$${2:key} . ' = ' . \$${3:val});
		}"""

'.text.php':
  'bladeforeach':
    'prefix': 'bforeach'
    'body': """\@foreach (\$${1:entries} as \$${2:entry})
				{{ \$${2:entry}-> }}
		\@endforeach"""

  'map-all':
    'prefix': 'mapall'
    'body': """map(function(\$${1:e}) {
				return \$${1:e};
		})->all();"""

  'map-all-arrow':
    'prefix': '.map'
    'body': """->map(function(\$${1:e}) {
				return \$${1:e};
		})->all();"""

  'dot-to-arrow':
    'prefix': '.'
    'body': '->'
